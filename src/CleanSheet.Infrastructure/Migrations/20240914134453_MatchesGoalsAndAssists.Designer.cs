// <auto-generated />
using System;
using CleanSheet.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanSheet.Infrastructure.Migrations
{
    [DbContext(typeof(CleanSheetDbContext))]
    [Migration("20240914134453_MatchesGoalsAndAssists")]
    partial class MatchesGoalsAndAssists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanSheet.Domain.Entities.Assist", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayerAssistedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerAssistedId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Assists");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Career", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Goal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssistId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOwnGoal")
                        .HasColumnType("boolean");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerScoredId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerScoredId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.InitialTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("InitialTeams");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("AwayGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("Competition")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<short>("HomeGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("Location")
                        .HasColumnType("smallint");

                    b.Property<long>("OpponentId")
                        .HasColumnType("bigint");

                    b.Property<short>("Result")
                        .HasColumnType("smallint");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OpponentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Opponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Opponents");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("KitNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<short>("Overall")
                        .HasColumnType("smallint");

                    b.Property<short>("Position")
                        .HasColumnType("smallint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CareerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CareerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.Property<long>("LineupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MatchesId")
                        .HasColumnType("bigint");

                    b.HasKey("LineupId", "MatchesId");

                    b.HasIndex("MatchesId");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Assist", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Goal", "Goal")
                        .WithOne("Assist")
                        .HasForeignKey("CleanSheet.Domain.Entities.Assist", "Id");

                    b.HasOne("CleanSheet.Domain.Entities.Player", "PlayerAssisted")
                        .WithMany()
                        .HasForeignKey("PlayerAssistedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanSheet.Domain.Entities.Player", null)
                        .WithMany("Assists")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Goal");

                    b.Navigation("PlayerAssisted");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Career", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.User", "User")
                        .WithMany("Careers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CleanSheet.Domain.Entities.Manager", "Manager", b1 =>
                        {
                            b1.Property<long>("CareerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("varchar(12)")
                                .HasColumnName("ManagerFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("varchar(12)")
                                .HasColumnName("ManagerLastName");

                            b1.HasKey("CareerId");

                            b1.ToTable("Careers");

                            b1.WithOwner()
                                .HasForeignKey("CareerId");
                        });

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Goal", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Match", "Match")
                        .WithMany("Goals")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanSheet.Domain.Entities.Player", null)
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId");

                    b.HasOne("CleanSheet.Domain.Entities.Player", "PlayerScored")
                        .WithMany()
                        .HasForeignKey("PlayerScoredId");

                    b.Navigation("Match");

                    b.Navigation("PlayerScored");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.InitialTeam", b =>
                {
                    b.OwnsMany("CleanSheet.Domain.Entities.InitialPlayer", "InitialSquad", b1 =>
                        {
                            b1.Property<long>("InitialTeamId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateOnly>("Birthday")
                                .HasColumnType("date");

                            b1.Property<int>("KitNumber")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(50)");

                            b1.Property<int>("Overall")
                                .HasColumnType("integer");

                            b1.Property<string>("Position")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("InitialTeamId", "Id");

                            b1.ToTable("InitialTeams");

                            b1.ToJson("InitialSquad");

                            b1.WithOwner()
                                .HasForeignKey("InitialTeamId");
                        });

                    b.Navigation("InitialSquad");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Match", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Opponent", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanSheet.Domain.Entities.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opponent");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Opponent", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Team", "Team")
                        .WithMany("Opponents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Player", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Team", null)
                        .WithMany("Squad")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Team", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Career", "Career")
                        .WithMany("Teams")
                        .HasForeignKey("CareerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Career");
                });

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.HasOne("CleanSheet.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("LineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanSheet.Domain.Entities.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Career", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Goal", b =>
                {
                    b.Navigation("Assist");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Match", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Player", b =>
                {
                    b.Navigation("Assists");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.Team", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Opponents");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("CleanSheet.Domain.Entities.User", b =>
                {
                    b.Navigation("Careers");
                });
#pragma warning restore 612, 618
        }
    }
}
